#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D texture0;
uniform sampler2D texture1;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform bool isTwoTex;
void main(){

	// Light emission properties
	// You probably want to put them as uniforms
	vec4 LightColor = vec4(1,1,1,1);
	float LightPower = 50.0f;

	// Material properties
	vec4 MaterialDiffuseColor;
	if(isTwoTex){
    	MaterialDiffuseColor = texture( texture0, UV ) * texture(texture1, UV);
    }else{
    	MaterialDiffuseColor = texture( texture0, UV );
    }
	vec4 MaterialAmbientColor = vec4(0.1,0.1,0.1,1.0) * MaterialDiffuseColor;
	vec4 MaterialSpecularColor = vec4(0.3,0.3,0.3,1);

	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction,
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	vec3 light_dir = normalize(Position_worldspace - l);
	float cosTheta = clamp( dot( n,l ), 0,1 );

	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = normalize(reflect(light_dir,n));
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );

    float spec = max(dot(R, E), 0.0);
    float diffuse = max(dot(-light_dir, n), 0.0);

    float intensity = 0.6 * diffuse + 0.4 * spec;

     	if (intensity > 0.7) {
     		intensity = 1.1;
     	}
     	else if (intensity > 0.3) {
     		intensity = 0.5;
     	}
     	else {
     		intensity = 0.2;
      }

    //float intensity = max(dot(-light_dir,n), 0.0);

	//if (intensity > 0.95)
	//	MaterialDiffuseColor.rgba == vec4(1.0,0.5,0.5,1.0);
//	else if (intensity > 0.5)
//		MaterialDiffuseColor.rgba == vec4(0.6,0.3,0.3,1.0);
//	else if (intensity > 0.25)
//		MaterialDiffuseColor.rgba == vec4(0.4,0.2,0.2,1.0);
//	else
//		MaterialDiffuseColor.rgba == vec4(0.2,0.1,0.1,1.0);


    color = MaterialAmbientColor + MaterialDiffuseColor *  intensity  ;

}

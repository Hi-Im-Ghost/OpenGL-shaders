#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform vec3 LightPosition_worldspace;


void main(){

	// Pozycja wyjściowa wierzchołka, w przestrzeni : MVP * pozycja
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

	// Pozycja wierzchołka w przestrzeni świata : M * pozycja
	Position_worldspace = (M * vec4(vertexPosition_modelspace,1)).xyz;

	// Wektor przechodzący od wierzchołka do kamery w przestrzeni kamery.
	// W przestrzeni kamery kamera jest na początku (0,0,0).
	vec3 vertexPosition_cameraspace = ( V * M * vec4(vertexPosition_modelspace,1)).xyz;
	EyeDirection_cameraspace = vec3(0.0f, 0.0f, 0.0f) - vertexPosition_cameraspace;

	// Wektor przechodzący od wierzchołka do światła w przestrzeni kamery. M jest pomijane, ponieważ jest tożsamością.
	vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace,1)).xyz;
	LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;

	// Normalna wierzchołka w przestrzeni kamery
	Normal_cameraspace = ( V * M * vec4(vertexNormal_modelspace,0)).xyz; // Prawidłowe tylko, jeśli ModelMatrix nie skaluje modelu! Użyj jej odwrotnej transpozycji, jeśli nie.

	// UV wierzchołka. Brak specjalnej przestrzeni dla tego.
	UV = vertexUV;


}


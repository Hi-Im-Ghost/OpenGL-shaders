#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace; //normal
in vec3 EyeDirection_cameraspace; //view
in vec3 LightDirection_cameraspace; //frag

// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D texture0;
uniform sampler2D texture1;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace; //light pos

void main(){

	// Właściwości emisji światła
	vec4 LightColor = vec4(1,1,1,1);
	float LightPower = 2.0f;

	// Właściwości materiału
	vec4 MaterialDiffuseColor = texture( texture0, UV );
	vec4 MaterialAmbientColor = vec4(0.1,0.1,0.1,1.0) * MaterialDiffuseColor;
	vec4 MaterialSpecularColor = vec4(0.3,0.3,0.3,1);

	// Odległość do światła
	float distance = length( LightPosition_worldspace - Position_worldspace );

	// Normalna obliczonego fragmentu w przestrzeni kamery
	vec3 n = normalize( Normal_cameraspace );

	// Kierunek światła (od fragmentu do światła)
	vec3 l = normalize( LightDirection_cameraspace );
    vec3 light_dir = normalize(Position_worldspace - l);

	// Cosinus kąta między normalnym a kierunkiem światła, wyznaczonym powyżej 0,
	//  - światło jest w pionie  -> 1
	//  - światło jest prostopadłe -> 0
	//  - światło jest za -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );

	// Wektor oka (w kierunku kamery)
	vec3 E = normalize(EyeDirection_cameraspace);

	// Kierunek, w którym trójkąt odbija światło
	//vec3 Ref = reflect(-l,n);
    vec3 R = normalize(reflect(light_dir,n));

	// Cosinus kąta między wektorem Eye a wektorem Reflect, wyznaczonym powyżej 0,
	//  - Patrząc w odbicie -> 1
	//  - Patrząc gdzie indziej -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );

    float spec = max(dot(R, E), 0.0);
    float diffuse = max(dot(light_dir, n), 0.1);

    float intensity = 0.6 * diffuse + 0.4 * spec;
    //Intensywnosc pozycji swiecenia dla specular
    float specular_intensity = pow(max(dot(light_dir, n), 0.0), 64);

    //Blinn-Phong obliczenia
    vec3 lightDir   = normalize(LightPosition_worldspace - LightDirection_cameraspace);
    vec3 viewDir    = normalize(EyeDirection_cameraspace - LightDirection_cameraspace);
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float specBP = pow(max(dot(n, halfwayDir), 0.0), 16);

    //Phong obliczenia
    vec3 reflectDir = reflect(-lightDir, n);
    float specP = pow(max(dot(viewDir, reflectDir), 0.0), 8.0);

    //Diffuse Light
    //color = MaterialDiffuseColor;

    //Ambient Light
    //color = MaterialAmbientColor;

    //Ambient + Diffuse Light
	//color = MaterialAmbientColor + MaterialDiffuseColor;

	//Lambertian reflectance
	//color =  MaterialDiffuseColor * diffuse;

	//Lambertian reflectance with Ambient
	//color = MaterialAmbientColor + MaterialDiffuseColor * diffuse;

    //Specular
    //color = MaterialAmbientColor + MaterialSpecularColor * specular_intensity * LightColor * LightPower;

	//Specular all
    //color = MaterialAmbientColor + MaterialDiffuseColor * diffuse + MaterialSpecularColor * specular_intensity * LightColor * LightPower;

    //Phong
    //color = MaterialAmbientColor + MaterialDiffuseColor * LightColor * specP;

    //Blinn-Phong
    color = MaterialAmbientColor + MaterialDiffuseColor * LightColor * specBP;
}

